// // type   name    function   library
// var serialport = require('serialport');   
// var SerialPort = serialport.SerialPort;
// //var prompt = require('prompt');
//   //prompt.start();

//   //user enters a third argument, being the serialport
//   var portName = "/dev/ttyUSB0";


// //arduino object created with
// var port = new SerialPort(portName,
// {
//   //speed             parser
//   baudRate:1200,    
//   parser:serialport.parsers.readline("\r\n")
// });




// var degrees;

// port.on('open', onOpen);
// port.on('data', onData);

// function onOpen(){
// 	console.log("Open sesame");  
// }

// function onData(data){
// 	if (parseFloat(data) !== 'NaN')
// 	{console.log(parseFloat(data));}
// }

// function end(){
// 	console.log("Goodbye");
// 	return 0;
// }

"use strict";

var Neuron = require('../Neuron');
var serialport = require('serialport');   
var SerialPort = serialport.SerialPort;
var prompt = require('prompt');


class Scientific extends Neuron {
    constructor(name, feedback, color_log, idle_timeout, i2c, model) {
        super(name, feedback, color_log, idle_timeout);
        this.name = name;
        this.feedback = feedback;
        this.log = color_log;
        this.idle_time = idle_timeout;
        this.i2c = i2c;
        this.model = model;
        this.portName = "/dev/ttyUSB3";
        var OnorOff = "poop";
        var parent = this;

        var SerialPort = serialport.SerialPort;
        var port = new SerialPort(this.portName,
        {
                  //speed             parser
                  baudRate:1200,    
            parser:serialport.parsers.readline("\r\n")
        });
        // Construct Class here

    this.onOpen = function onOpen(){
        console.log("Open sesame"); 
    }

    this.onData = function (data){
        if (parseFloat(data) !== 'NaN' && OnorOff == "on")
        {
            console.log(parseFloat(data));
        }
    }



 this.scienceOn = function(){
     OnorOff = "on";
     // getPrompt();
     
        port.on('open', this.onOpen);
        port.on('data', this.onData);
        console.log(OnorOff);
    
}

    this.scienceOff = function(){
        OnorOff = "off";
    }


}


react(input) {
    var name = input.name;
    var state = input.state;
    switch(name)
    {
        case "Temperature":
        {
        if(state=="on")
            {
                console.log("poop");
                this.scienceOn();
            }
        else if(state == "off")
        {
            console.log("Off");
            this.scienceOff();
        }
        else console.log("Invalid input");

        break;
        }

        default:
        console.log("Tool does not exist");
        break;
    }
}

halt() {
    this.log.output(`HALTING ${this.name}`);
    this.feedback(this.name ,`HALTING ${this.name}`);
}
resume() {
    this.log.output(`RESUMING ${this.name}`);
    this.feedback(this.name ,`RESUMING ${this.name}`);
}
idle() {
    this.log.output(`IDLING ${this.name}`);
    this.feedback(this.name ,`IDLING ${this.name}`);
}
}

var swag = new Scientific();
// swag.scienceOn();




module.exports = Scientific;